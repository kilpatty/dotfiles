" :set shell=/usr/local/bin/zsh


" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

"Set hybrid mode for line numbers
set relativenumber
set number

"Set autowrite mainly for :GoBuild and :make
set autowrite

"Set a colored column for easier line breaks
set colorcolumn=90

"Use True Colors
set termguicolors

"Remap the leader key to space
let mapleader=" "

"Set split windows to how I like it.
set splitbelow
set splitright

"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

set timeoutlen=1000 ttimeoutlen=0

" let &t_SI = \<Esc>]50;CursorShape=1\x7
" let &t_SR = \<Esc>]50;CursorShape=2\x7
" let &t_EI = \<Esc>]50;CursorShape=0\x7

" Change cursor depending on the mode
" Should probably wrap this in an if statement
set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50
  \,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor
  \,sm:block-blinkwait175-blinkoff150-blinkon175

"if exists('$ITERM_PROFILE')
"  if exists('$TMUX')
"    let &t_SI = "\<Esc>[3 q
"    let &t_EI = "\<Esc>[0 q
"  else
"    let &t_SI = "\<Esc>]50;CursorShape=1\x7
"    let &t_EI = "\<Esc>]50;CursorShape=0\x7
"  endif
"end

"
"inoremap <special> <Esc> <Esc>hl

"if exists('$TMUX')
"  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\
 "   let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\
 "   else
"	      let &t_SI = "\<Esc>]50;CursorShape=1\x7
"	        let &t_EI = "\<Esc>]50;CursorShape=0\x7
"	endif
	":autocmd InsertEnter * set cul
	":autocmd InsertLeave * set nocul

"Declare directory for plugins
call plug#begin('~/.vim/plugged')

" Plug 'fatih/vim-go'
" Plug 'tpope/vim-dispatch'
" Plug 'tpope/vim-commentary'
Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim'
Plug 'w0rp/ale'
Plug 'nvim-lualine/lualine.nvim'
" If you want to have icons in your statusline choose one of these
Plug 'kyazdani42/nvim-web-devicons'

Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'dracula/vim'
" Plug 'Pocco81/Catppuccino.nvim'
Plug 'folke/tokyonight.nvim', { 'branch': 'main' }
Plug 'tpope/vim-surround'
Plug 'elzr/vim-json'
Plug 'editorconfig/editorconfig-vim'
Plug 'tomlion/vim-solidity'
Plug 'tpope/vim-fugitive'
Plug 'heavenshell/vim-jsdoc'
Plug 'styled-components/vim-styled-components', { 'branch': 'main' }
Plug 'vimwiki/vimwiki'
Plug 'Yggdroot/indentLine'
Plug 'digitaltoad/vim-pug'
" Rust Plugins
Plug 'rust-lang/rust.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'tpope/vim-unimpaired'
Plug 'wsdjeg/vim-todo'
Plug 'honza/vim-snippets'
Plug 'MaxMEllon/vim-jsx-pretty'
Plug 'peitalin/vim-jsx-typescript'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}  " We recommend updating the parsers on update
Plug 'nvim-lua/popup.nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'
Plug 'dstein64/vim-startuptime'




" Unmanaged plugin (manually installed and updated)
Plug '~/Developer/10xprogrammer/tarsier-vim'

" Initialize plugin system
call plug#end()

" Tokyonight configuration
let g:tokyonight_style = "night"

" colorscheme dracula
" colorscheme catppuccino
colorscheme tokyonight


set nocompatible

syntax on

syntax sync fromstart

" Wrap gitcommit file types at the appropriate length
filetype indent plugin on


"Go-VIM Customization
"
"Swap Go FMT with GoImports
let g:go_fmt_command = "goimports"

"Have all lists be quickfix
let g:go_list_type = "quickfix"

"Map quickfix list movements to better keybindings
map <C-n> :cnext<CR>
map <C-m> :cprevious<CR>
nnoremap <leader>a :cclose<CR>


autocmd FileType go nmap <leader>r  <Plug>(go-run)
autocmd FileType go nmap <leader>t  <Plug>(go-test)
autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)


" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>

inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? '\<C-y>\<cr>' : '\<cr>'
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Make <tab> used for trigger completion, completion confirm, snippet expand and jump like VSCode.
" inoremap <silent><expr> <TAB>
"       \ pumvisible() ? coc#_select_confirm() :
"       \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
"       \ <SID>check_back_space() ? "\<TAB>" :
"       \ coc#refresh()

" function! s:check_back_space() abort
"   let col = col('.') - 1
"   return !col || getline('.')[col - 1]  =~# '\s'
" endfunction

let g:coc_snippet_next = '<tab>'

" Go-T
let g:tagbar_type_go = {
	\ 'ctagstype' : 'go',
	\ 'kinds'     : [
		\ 'p:package',
		\ 'i:imports:1',
		\ 'c:constants',
		\ 'v:variables',
		\ 't:types',
		\ 'n:interfaces',
		\ 'w:fields',
		\ 'e:embedded',
		\ 'm:methods',
		\ 'r:constructor',
		\ 'f:functions'
	\ ],
	\ 'sro' : '.',
	\ 'kind2scope' : {
		\ 't' : 'ctype',
		\ 'n' : 'ntype'
	\ },
	\ 'scope2kind' : {
		\ 'ctype' : 't',
		\ 'ntype' : 'n'
	\ },
	\ 'ctagsbin'  : 'gotags',
	\ 'ctagsargs' : '-sort -silent'
\ }

" Plugins {
" 	ALE {
		" Only run linters named in ale_linters settings.
		"let g:ale_linters_explicit = 1

		" Explicitly listed linters to use.
		let g:ale_linters = {
		\	'go': [''],
		\	'rust': [''],
		\}
		let g:ale_fixers = {
		\	'javascript': ['prettier', 'eslint'],
		\	'python': ['yapf'],
		\	'css': ['prettier'],
		\	'rust': ['rustfmt'],
		\}


		" Rust
		let g:ale_rust_cargo_use_clippy = 1
        " let g:ale_rust_rls_executable = 'ra_lsp_server'
        " let g:ale_rust_rls_toolchain = ''
        let g:ale_rust_rustfmt_options = '--edition 2018'

		" Set this setting in vimrc if you want to fix files automatically on save.
		" This is off by default.
		let g:ale_fix_on_save = 1
		" let g:ale_sign_error = '●' " Less aggressive than the default '>>'
		" let g:ale_sign_warning = '.'
		let g:ale_lint_on_enter = 0 " Less distracting when opening a new file

		" Custom ale Error Message
		let g:ale_echo_msg_error_str = 'E'
		let g:ale_echo_msg_warning_str = 'W'
		let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

		" Only want 5 lines for ale loc list.
		let g:ale_list_window_size = 5

		" Open the location list when errors are found
		let g:ale_open_list = 1

		" Credit: https://github.com/desmap/ale-sensible "
		let g:ale_set_signs = 0
		hi link ALEErrorLine ErrorMsg
		hi link ALEWarningLine WarningMsg
		let g:ale_lint_on_text_changed = 'normal'
		let g:ale_lint_on_insert_leave = 1
		let g:ale_lint_delay = 0
		au VimEnter,BufEnter,ColorScheme *
		  \ exec "hi! ALEInfoLine
		    \ guifg=".(&background=='light'?'#808000':'#ffff00')."
		    \ guibg=".(&background=='light'?'#ffff00':'#555500') |
		  \ exec "hi! ALEWarningLine
		    \ guifg=".(&background=='light'?'#808000':'#ffff00')."
		    \ guibg=".(&background=='light'?'#ffff00':'#555500') |
		  \ exec "hi! ALEErrorLine
		    \ guifg=".(&background=='light'?'#ff0000':'#ff0000')."
		    \ guibg=".(&background=='light'?'#ffcccc':'#550000')
" 	}
" 	Airline {
		" let g:airline#extensions#ale#enabled = 1
" 	}
" 	VimWiki {
		let wiki_1 = {}
		let wiki_1.path = '~/Documents/Sean/vimwiki/'
		let wiki_1.index = 'index'
		let g:vimwiki_list = [wiki_1]
" 	}
" 	Coc {
 	let g:coc_global_extensions = ["coc-rust-analyzer", "coc-sql", "coc-tsserver", "coc-json", "coc-prettier", "coc-eslint", "coc-styled-components", "coc-react-refactor", "coc-marketplace"]

    xmap <leader>a  <Plug>(coc-codeaction-selected)
    nmap <leader>a  <Plug>(coc-codeaction-selected)
    " Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

    " Look into if this makes sense. From here: https://thoughtbot.com/blog/modern-typescript-and-react-development-in-vim
    " if isdirectory('./node_modules') && isdirectory('./node_modules/prettier')
  " let g:coc_global_extensions += ['coc-prettier']
" endif

" if isdirectory('./node_modules') && isdirectory('./node_modules/eslint')
  " let g:coc_global_extensions += ['coc-eslint']
" endif
"
" 	}
" 	Tree Sitter {

lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = "maintained", -- one of "all", "maintained" (parsers with maintainers), or a list of languages
  -- @todo let's review this btw
  ignore_install = { "javascript" }, -- List of parsers to ignore installing
  highlight = {
    enable = true,              -- false will disable the whole extension
  },
}
EOF

" }
" nnoremap <F5> :call LanguageClient_contextMenu()<CR>
" " Or map each action separately
" nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
" nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
" nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>

" set omnifunc=LanguageClient#complete
" set completefunc=LanguageClient#complete

" Find files using Telescope command-line sugar.
nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>
